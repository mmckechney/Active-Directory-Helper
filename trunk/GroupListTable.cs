//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a the TypedDataTableBuilder tool.
//     (TypedDataTableBuilder  -- Michael McKechney, author)
//		
//     Visual Studio .NET Custom Tool Setting: TypedTableBuilder
//	   Version: 4.0.0.18379
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// <autogenerated>
//------------------------------------------------------------------------------


namespace ActiveDirectoryHelper.Tables
{

	using System;
	using System.Data;
	using System.Runtime.Serialization;
	using System.Drawing;

	[Serializable()]
	[System.ComponentModel.ToolboxItem(true)]
	[System.ComponentModel.DesignerCategory("Component")]
	[System.ComponentModel.DesignTimeVisible(true)]
	[System.Drawing.ToolboxBitmap(typeof(System.Data.DataSet))]
	public partial class GroupListTable : DataTable, System.Collections.IEnumerable
	{
	
	
		private DataColumn columnGroupName;
		public  GroupListTable(): base("GroupListTable")
		{
			this.InitClass();
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
		}
		public GroupListTable(DataTable table): base(table.TableName)
		{
			this.CaseSensitive = table.CaseSensitive;
			this.Locale = table.Locale;
			this.Namespace = table.Namespace;
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
			this.InitClass();
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
			foreach(DataRow tmpRow in table.Rows)
			{
				this.ImportRow(tmpRow);
			}
		}
		public GroupListTable(SerializationInfo info, StreamingContext context):base(info,context)
		{
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
		}
	
		private void myColumn_Changed( object sender, DataColumnChangeEventArgs e )
		{
			this.InitVars();
		}
		public int Count
		{
			get
			{
				return this.Rows.Count;
			}

		}
		public DataColumn GroupNameColumn
		{
			get
			{
				return this.columnGroupName;
			}

		}
		
		public GroupListTableRow this[int index]
		{
			get
			{
				return ((GroupListTableRow)(this.Rows[index]));
			}

		}
		public GroupListTableRow NewGroupListTableRow()
		{
			return ((GroupListTableRow)(this.NewRow()));
		}

		public void AddGroupListTableRow(GroupListTableRow row)
		{
			this.Rows.Add(row);
		}
		public bool AddGroupListTableRow(String GroupName)
		{
			GroupListTableRow newRow = (GroupListTableRow)this.NewRow();
			try
			{	
				newRow.GroupName = GroupName;
				this.Rows.Add(newRow);
			}catch(Exception e)
			{
				throw new System.ApplicationException("Error in Auto-Generated: GroupListTable.AddGroupListTableRow(String) Method",e);
			}
			return true;
			
		}
		
		protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
		{
			return new GroupListTableRow(builder);
		}
		public void RemoveGroupListTableRow(GroupListTableRow row)
		{
			this.Rows.Remove(row);
		}
		protected override DataTable CreateInstance()
		{
			return new GroupListTable();
		}
		
		
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this.Rows.GetEnumerator();
		}
		public override DataTable Clone() 
		{
			GroupListTable cln = ((GroupListTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}
		internal void InitVars()
		{
			
			this.columnGroupName=this.Columns["GroupName"];
			
		}
		private  void InitClass()
		{
		
			this.columnGroupName = new DataColumn("GroupName", typeof(String), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnGroupName);
		
		
		
		}

		public DataTable SelectDistinct(string FieldName)
		{	
			string[] FieldNames = new String[]{FieldName};
			return SelectDistinct(FieldNames);
		}

		public DataTable SelectDistinct(string[] FieldNames)
		{	
			bool missMatch = false;
			DataTable dt = new DataTable("distinct_values");
			string fieldNameList = "";
			for(int i=0;i<FieldNames.Length;i++)
			{
				fieldNameList += FieldNames[i];
				if(i!= FieldNames.Length-1)
					fieldNameList += ",";
			}
			
			for(int i=0;i<FieldNames.Length;i++)
			{
				dt.Columns.Add(FieldNames[i], this.Columns[FieldNames[i]].DataType);
			}
			
			object[] LastValue = new object[FieldNames.Length];
			
			foreach (DataRow dr in this.Select("", fieldNameList))
			{
				for(int i=0;i<FieldNames.Length;i++)
				{
					if (  LastValue[i] == null || !(ColumnEqual(LastValue[i], dr[FieldNames[i]])) ) 
					{
						missMatch = true;
						for(int j=0;j<FieldNames.Length;j++)
						{
							LastValue[j] = dr[FieldNames[j]]; 
						}
						break;
					}
				}

				if(missMatch)
				{
					DataRow tmpRow = dt.NewRow();
					for(int i=0;i<FieldNames.Length;i++)
					{
						tmpRow[FieldNames[i]] = LastValue[i];
					}
					dt.Rows.Add(tmpRow);
					missMatch = false;
				}
			}
			return dt;
		}
		
		
		public DataTable SelectDistinct(DataColumn[] DistinctColumns)
		{
			bool missMatch = false;
			DataTable dt = new DataTable("distinct_values");
			string fieldNameList = "";
			for(int i=0;i<DistinctColumns.Length;i++)
			{
				fieldNameList += DistinctColumns[i].ColumnName;
				if(i!= DistinctColumns.Length-1)
					fieldNameList += ",";
			}
			
			for(int i=0;i<DistinctColumns.Length;i++)
			{
				dt.Columns.Add(DistinctColumns[i].ColumnName,DistinctColumns[i].DataType);
			}
			
			object[] LastValue = new object[DistinctColumns.Length];
			
			foreach (DataRow dr in this.Select("", fieldNameList))
			{
				for(int i=0;i<DistinctColumns.Length;i++)
				{
					if (  LastValue[i] == null || !(ColumnEqual(LastValue[i], dr[DistinctColumns[i]])) ) 
					{
						missMatch = true;
						for(int j=0;j<DistinctColumns.Length;j++)
						{
							LastValue[j] = dr[DistinctColumns[j]]; 
						}
						break;
					}
				}
				if(missMatch)
				{
					DataRow tmpRow = dt.NewRow();
					for(int i=0;i<DistinctColumns.Length;i++)
					{
						tmpRow[DistinctColumns[i].ColumnName] = LastValue[i];
					}
					dt.Rows.Add(tmpRow);
					missMatch = false;
				}
			}
			return dt;
		}

		public DataTable SelectDistinct(DataColumn DistinctColumn)
		{
			DataColumn[] DistinctColumns = new DataColumn[]{DistinctColumn};
			return SelectDistinct(DistinctColumns);
		}


		private bool ColumnEqual(object A, object B)
		{
			if (A == System.DBNull.Value && B == System.DBNull.Value)
				 return true; 
			if ( A == System.DBNull.Value || B == System.DBNull.Value ) 
				return false; 
			return ( A.Equals(B) );  
		}


		public bool ImportRows(DataRow[] SourceRows)
		{
			bool importError = false;
			for(int i=0;i<SourceRows.Length;i++)
			{
				try
				{
					this.ImportRow(SourceRows[i]);
				}
				catch(Exception e)
				{
					importError = true;
					throw new System.ApplicationException("Error in Auto-Generated: GroupListTable.ImportRows(DataRow[]) Method",e);
				}					
				
				
			}
			return importError;
		}
		
		public bool ImportRows( GroupListTableRow[] SourceRows)
		{
			bool importError = false;
			for(int i=0;i<SourceRows.Length;i++)
			{
				try
				{
					this.ImportRow( (DataRow)SourceRows[i]);
				}
				catch(Exception e)
				{
					importError = true;
					throw new System.ApplicationException("Error in Auto-Generated: GroupListTable.ImportRows(GroupListTableRow[]) Method",e);
				}					

				
			}
			return importError;
		}
		
		
		//private Exception myLastException;
		//public Exception GetLastException()
		//{
		//	return myLastException;
		//}
		
		public new System.Data.DataRowCollection Rows
		{
			get
			{
				return base.Rows;
			}
		
		}
		
		public virtual bool Fill(string fixedString)
		{
		
		GroupListTableRow newRow = (GroupListTableRow)this.NewRow();
			try
			{	
				this.Rows.Add(newRow);
			}
			catch(Exception e)
			{
				throw new System.ApplicationException("Error in Auto-Generated: GroupListTable.Fill(string) Method",e);
			}
			return true;
		
		}

	}
	public partial class GroupListTableRow : DataRow 
	{
		private GroupListTable tableGroupListTable;
		internal GroupListTableRow(DataRowBuilder rb) : base(rb)
		{
			this.tableGroupListTable = ((GroupListTable)(this.Table));
		}
		
		public String GroupName
		{
			get
			{
				try
				{
					return ((String)(this[this.tableGroupListTable.GroupNameColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: GroupListTableRow.GroupName property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableGroupListTable.GroupNameColumn] = value;
			}
		}
		
		public bool SyncRowValues(DataRow SourceRow)
		{
			bool syncErrors = false;
			
			try
			{
				this[this.tableGroupListTable.GroupNameColumn] = SourceRow["GroupName"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			return syncErrors;
		
		}
		
		public bool SyncRowValues(GroupListTableRow SourceRow)
		{
			return SyncRowValues( (DataRow)SourceRow);
		}
	}

}